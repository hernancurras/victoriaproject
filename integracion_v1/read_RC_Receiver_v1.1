/*
Read a multi RC Channels out of the receiver.
Wire Receiver Gnd (Black or Brown) to Arduino Gnd.
Wire receiver Signal (White or Yellow) to any PortD Pin (0 to 7) of ATMega328 based Arduino.
Becarefull if you want to use Pin 0 and 1 as they are needed for RXD(USART Input) and TXD(USART Output)
Pins are set as Pin Change Interrupt PCINTxx in Pin Change Mask Register 2 PCMSK2.
Use Timer2 in Normal Mode with Overflow Interrupt to Measure RC PWM signal.
Return result PulseLenght in µs (Tipicaly 1000 to 2000µs).
On Futaba System PulseLenght range from 2000µs (Low) to 1000µs (High)
Return a Fail Safe Value if no signal is detected (2000µs for Futaba System).
Fail Safe Value can be changed to suits other system or requirement.
Micro Controller Clock Frequency shall be according to used MCU.
Prescaler can be changed but 64 is best fit and gives +/-4.0µs resolution.
More over with Prescaler at 64 the timer overflow occurs at 1024µs.
Counting 25 Overflows gives Fail Safe responce of 25.6ms (all frame is 20ms i.e 50Hz).
NOTE on TIMERS
Timer0 is a 08bit timer: PWM Pin05 and Pin06, timer functions, like delay(), millis() and micros() uses timer0
Timer1 is a 16bit timer: PWM Pin08 and Pin09, Servo library uses timer1 on Arduino Uno (timer5 on Arduino Mega)
Timer2 is a 08bit timer: PWM Pin03 and Pin11, the tone() function uses timer2.
So if you need tone() function to work properly:
-Avoid the use of Timer0, no good to touch delay(), millis() and micros() fonctions
-Use Timer1 but you loose Servo.Lib ability
DON'T FORGET TO SET SERIAL MONITOR AT 115200 BAUD!
**************************************************************************************************************
Canales del receptor conectados 1,3,5
Conectados al Arduino 328P NANO 5,6,7
**************************************************************************************************************
*/

#include <avr/io.h>
#include <avr/interrupt.h>                          //Needed to use interrupts
#include <stdint.h>                                 //Has to be added to use uint8_t...
#include <math.h>                                   //For using log() function

//MICRO CONTROLLER CLOCK FREQUENCY
#define MCU_CLOCKFREQ         16                    // Hz

//TIMER2 PRESCALER
#define TI2_PRESCALER         64                    // 1, 8, 32, 64, 128, 256 or 1024 for Timer2

//DOES NOT WORK    with Prescaler =  32 (MISS OVERFLOW COUNT)
//+/-4.0µs @ 16MHz with Prescaler =  64 Overflow every 1024µs 25 Overflows x 1024µs = 25.6ms (bit more than 20ms (50Hz) of RC PWM frame)
//+/-8.0µs @ 16MHz with Prescaler = 128 Overflow every 2048µs 12 Overflows x  512µs = 24.6ms

//Used Pins for RC Channels Input
const int ChannelPin[] = {5,6,7};             //{5,6,7} if all used (Caution! 0 is RXD/1 is TXD)
//Radio System Default Fail Safe Value (ex Low Throttle)
const int FailSafeVa[] = {2000,2000,2000};
//Number of Channels
const int ChannelNbr = (sizeof(ChannelPin)/sizeof(int));
//Markers
volatile uint8_t PinID[8];                          //if ChannelPin[] is 2,3,4,6 Pin ID: 2=0, 3=1, 4=2, 6=3
//Timer Bitwise Operators Calculated BitShift Left  using Log Base 2
const int ShiftL = (log (TI2_PRESCALER/MCU_CLOCKFREQ) / log (2));
//Timer Bitwise Operators Calculated BitShift Right using Log Base 2
const int ShiftR = (log (MCU_CLOCKFREQ/TI2_PRESCALER) / log (2));
//Capture Flag                                      //(One Extra Needed to avoid Strange BUG)
volatile boolean Flag[ChannelNbr];
//Variables holding Interrupt TimeStamps
volatile uint8_t InTimeStamp;
volatile uint8_t UpTimeStamp[ChannelNbr];           //0 to Channel Number (One Extra Needed to avoid Strange BUG)
volatile uint8_t DnTimeStamp[ChannelNbr];           //0 to Channel Number (One Extra Needed to avoid Strange BUG)
//Timer2 Overflow Counter
volatile uint8_t T2_OverFlow[ChannelNbr];           //0 to Channel Number (One Extra Needed to avoid Strange BUG)
//Timer2 Overflow SnapShot
volatile uint8_t OverFlow_P1,OverFlow_P2;
//PulseLenght
volatile int16_t PulseLenght[ChannelNbr];           //0 to Channel Number (One Extra Needed to avoid Strange BUG)
//Port D Status a
//Port D Status and Record
volatile uint8_t StatusPortD;
volatile uint8_t RecordPortD;                       //= 0xFF (Set 11111111 Default is high because the pull-up: Useless?)
volatile uint8_t ChangedBits;
volatile uint8_t BitPosition;

void setup() {
 delay(100);
 Serial.begin(115200);
 delay(100);
 Serial.print("ShiftL=");
 Serial.println(ShiftL);
 Serial.print("ShiftR=");
 Serial.println(ShiftR);
 delay(100);
 Serial.print("ChannelNb=");
 Serial.println(ChannelNbr);
 delay(100);
 //Timer2 (8bits) Setting and Starting
 SetStartTimer2();
 //Initialization Pin Change Interrupt
 InitPinChangeInt();
 delay(100);
}

void loop() {
 //HERE IS YOUR CODE
 
 int rudder=0, sailwinch=0, mode=0; 
 boolean autopilot=0;
 
     rudder = map(PulseLenght[1],1000,2000,-45,45);
     sailwinch = map(PulseLenght[2],1000,2000,0,100);
    
     if (PulseLenght[0] > 1500) {
     autopilot=1;
     }
     else {
        autopilot=0;
     }
  
     Serial.print("Autopilot ");
     Serial.print(":");
     Serial.print(autopilot);
     Serial.print(" ");
     Serial.print("Rudder ");
     Serial.print(":");
     Serial.print(rudder);
     Serial.print(" ");
     Serial.print("SailWinch ");
     Serial.print(":");
     Serial.print(sailwinch);
     Serial.println(" ");
}

//Timer2 (08bits) Setting and Starting
void SetStartTimer2(void) {
 //Disable global interrupts
 cli();
 //Clean the registers
 TCCR2A = 0;      
 //Clear Pending Interrupts
 TIFR2|=(1<<TOV2);
 //Enable overflow interrupts
 TIMSK2|=(1<<TOIE2);
 //Start timer with prescaller
 SetPrescaler(TI2_PRESCALER);
 //Enable global interrutps
 sei();
}

//Set Timer2 Prescaler
void SetPrescaler(int Prescaler) {
  //Select Case
 switch (Prescaler) {
   case 1:
     TCCR2B|=(1<<CS20);
     //Serial.println("Prescaler=1");
     break;
   case 8:
     TCCR2B|=(1<<CS21);
     //Serial.println("Prescaler=8");
     break;
   case 32:
     TCCR2B|=(1<<CS21)|(1<<CS20);
     //Serial.println("Prescaler=32");
     break;
   case 64:
     TCCR2B|=(1<<CS22);
     //Serial.println("Prescaler=64");
     break;
   case 128:
     TCCR2B|=(1<<CS22)|(1<<CS20);
     //Serial.println("Prescaler=128");
     break;
   case 256:
     TCCR2B|=(1<<CS22)|(1<<CS21);
     //Serial.println("Prescaler=256");
     break;
   case 1024:
     TCCR2B|=(1<<CS22)|(1<<CS21)|(1<<CS20);
     //Serial.println("Prescaler=1024");
     break;
   default: 
     TCCR2B|=(1<<CS20);
     //Serial.println("Prescaler=1");
   break;  
 }  
}

//Make Pin External Interrupts
void InitPinChangeInt(void) {
 //Disable global interrupts
 cli();
 //Make Pin External Interrupts
 for (int i=0; i<ChannelNbr; i++){
   // Clear the pins: Pins are now inputs
   DDRD&=~(1<<ChannelPin[i]); 
   // Turn On the Pull-up Resistor: Pins are now an inputs with pull-up enabled
   PORTD|=(1<<ChannelPin[i]);
   //Enable Pin Change Interrupt on Pins i.e PCINTxx in Pin Change Mask Register 2 PCMSK2
   PCMSK2|=(1<<ChannelPin[i]);
 } 
 //Enable PCIE2 in Pin Change Interrupt Control Register PCICR to enable PCMSK2 scan
 PCICR|=(1<<PCIE2);
 //Enable global interrutps
 sei();
 Serial.print("PCIMask=");
 Serial.println(PCMSK2,BIN);
 //Fill PinID
 Serial.println("PinID=");
 int j=0;
 for (int i=0; i<8; i++){
   if (PCMSK2 & (1<<i)) {
     PinID[i]=j;
     Serial.println(PinID[i]);
     j++;
   }
   else {
     PinID[i]=0;
     Serial.println(PinID[i]);
   }
 }
}

//Interrupt Service Routine On Edge Change Pin x (Rising or Falling)
ISR (PCINT2_vect) {
 //Interrupt Time Stamp Capture
 InTimeStamp = TCNT2;
 //Status of Port D taken a.s.a.p. 
 StatusPortD = PIND;
 //Check bits that changed since previous ISR and Reject bits out of Pin Change Mask Register 2
 ChangedBits = (StatusPortD ^ RecordPortD) & PCMSK2;
 //Count Number of Bits set in AnalyseBits (Brian Kernighan's way)
 volatile uint8_t c,p,P1,P2;
 for (c = 0; ChangedBits; c++) {
   //Get number of trailing 0 like this              1st Row Ex:00110000 => 00001111 then count set bits
   BitPosition = (ChangedBits & -ChangedBits) - 1; //2nd Row Ex:00100000 => 00011111 then count set bits
   for (p = 0; BitPosition; p++) {
     BitPosition &= BitPosition - 1;
   }
   ChangedBits &= ChangedBits - 1;
   if (c==0) {P1 = p; P2 = 0;}                     //One Edge  Received P1 is position of bit from left
   if (c==1)  P2 = p;                              //Two Edges Received P1 is position of bit from left
 }
 //Where to store 1st Edge Data
 int i = PinID[P1];
 //Record Timer2 OverFlow Count for P1
 OverFlow_P1 = T2_OverFlow[i];
 //Where to store 2nd Edge Data
 int j = PinID[P2];
 //Record Timer2 OverFlow Count for P1
 OverFlow_P2 = T2_OverFlow[j];
 //Record bits status for next ISR
 RecordPortD = StatusPortD;
 //One Edge Received then discriminate Rising/Falling Edges
 if (c>=1) {                                       //c=1 for One Edge Received
   //Time Stamp Capture First Rising Edge
   if   (StatusPortD & (1<<P1))  {
     //Time Stamp Capture
     UpTimeStamp[i] = InTimeStamp;
     //Reset Overflow Counter for PulseLenght Calculation
     T2_OverFlow[i] = 0;
     //Reset Flag
     Flag[i] = false;
   }
   //Time Stamp Capture First Falling Edge
   if (!(StatusPortD & (1<<P1))) {
     //Time Stamp Capture
     DnTimeStamp[i] = InTimeStamp;
     //Calculate Pulse Lenght (Timer Tick)
     PulseLenght[i] = (int16_t)((int16_t)(DnTimeStamp[i] + ((uint16_t)0x100L * OverFlow_P1)) - UpTimeStamp[i]);
     //Calculate Pulse Lenght (µs) BitShift Multiply by...
     if (ShiftL > 0) PulseLenght[i] = PulseLenght[i]<<ShiftL;
     //Calculate Pulse Lenght (µs) BitShift Divide by...
     if (ShiftR > 0) PulseLenght[i] = PulseLenght[i]>>ShiftR;
     //Remove Unwanted Values
     PulseLenght[i] = constrain(PulseLenght[i],750,2250);
     //Reset Overflow Counter to avoid Fail Safe
     T2_OverFlow[i] = 0;
     //Set Flag
     Flag[i] = true;
   }
 }
 //Two Edges Received Simultaneously then discriminate Rising/Falling Edges
 if (c>=2) {                                       //c=2 for One Edge Received
   //Time Stamp Capture Second Rising Edge
   if   (StatusPortD & (1<<P2))  {
     //Time Stamp Capture
     UpTimeStamp[j] = InTimeStamp;
     //Reset Overflow Counter for PulseLenght Calculation
     T2_OverFlow[j] = 0;
     //Reset Flag
     Flag[j] = false;
   }
   //Time Stamp Capture Second Falling Edge
   if (!(StatusPortD & (1<<P2))) {
     //Time Stamp Capture
     DnTimeStamp[j] = InTimeStamp;
     //Calculate Pulse Lenght (Timer Tick)
     PulseLenght[j] = (int16_t)((int16_t)(DnTimeStamp[j] + ((uint16_t)0x100L * OverFlow_P2)) - UpTimeStamp[j]);
     //Calculate Pulse Lenght (µs) BitShift Multiply by...
     if (ShiftL > 0) PulseLenght[j] = PulseLenght[j]<<ShiftL;
     //Calculate Pulse Lenght (µs) BitShift Divide by...
     if (ShiftR > 0) PulseLenght[j] = PulseLenght[j]>>ShiftR;
     //Remove Unwanted Values
     PulseLenght[j] = constrain(PulseLenght[j],750,2250);
     //Reset Overflow Counter to avoid Fail Safe
     T2_OverFlow[j] = 0;
     //Set Flag
     Flag[j] = true;
   }
 }
}

//Interrupt Service Routine On Timer Overflow
ISR(TIMER2_OVF_vect) {
 for (int i=0; i<ChannelNbr; i++){
   //Increment Overflow Counter
   T2_OverFlow[i]++;
   if (T2_OverFlow[i] > 25) {
     //Fail Safe Value
     PulseLenght[i] = FailSafeVa[i];
     //Set Flag
     Flag[i] = true;
   }
 }
}
